name: Professional Modules - Parallel Build & PR Orchestration

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Base branch to create PRs against'
        required: false
        default: 'main'
      run_tests:
        description: 'Run tests before creating PRs'
        required: false
        default: 'true'
        type: boolean
  push:
    branches:
      - develop
    paths:
      - 'services/**'
      - 'frontend/**'

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: professional-modules-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  BASE_BRANCH: ${{ github.event.inputs.base_branch || 'main' }}

jobs:
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version number
        id: version
        run: |
          VERSION="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Generate timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Build timestamp: $TIMESTAMP"

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          mkdir -p services frontend docs modules
          echo "✅ Directory structure validated"

      - name: Create labels if they don't exist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📋 Creating labels..."

          # Function to create label if it doesn't exist
          create_label() {
            local name=$1
            local color=$2
            local description=$3

            if ! gh label list | grep -q "^${name}"; then
              gh label create "${name}" --color "${color}" --description "${description}" || true
              echo "✅ Created label: ${name}"
            else
              echo "ℹ️  Label already exists: ${name}"
            fi
          }

          # Create tier labels
          create_label "tier:medical" "e74c3c" "Medical School tier"
          create_label "tier:law" "3498db" "Law School tier"
          create_label "tier:mba" "2ecc71" "MBA Program tier"
          create_label "tier:engineering" "f39c12" "Engineering tier"

          # Create other labels
          create_label "enhancement" "a2eeef" "New feature or request"
          create_label "automated" "0e8a16" "Automated PR/issue"
          create_label "priority:high" "d73a4a" "High priority"

          echo "✅ All labels ready"

  build-professional-modules:
    name: Build ${{ matrix.module.name }} Module
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      fail-fast: false
      matrix:
        module:
          - name: 'Medical School'
            slug: 'medical-school'
            label: 'tier:medical'
            color: 'e74c3c'
          - name: 'Law School'
            slug: 'law-school'
            label: 'tier:law'
            color: '3498db'
          - name: 'MBA Program'
            slug: 'mba'
            label: 'tier:mba'
            color: '2ecc71'
          - name: 'Engineering'
            slug: 'engineering'
            label: 'tier:engineering'
            color: 'f39c12'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create feature branch
        run: |
          BRANCH_NAME="feature/${{ matrix.module.slug}}-${{ needs.preflight.outputs.version }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create module structure
        run: |
          echo "📁 Creating module structure for ${{ matrix.module.name }}..."
          mkdir -p "modules/${{ matrix.module.slug }}"/{database,api,frontend,docs,tests}
          echo "✅ Module structure created"

      - name: Generate module files using helper script
        run: |
          if [ -f ".github/workflows/generate-module.sh" ]; then
            chmod +x .github/workflows/generate-module.sh
            .github/workflows/generate-module.sh \
              "${{ matrix.module.slug }}" \
              "${{ matrix.module.name }}" \
              "${{ needs.preflight.outputs.version }}" \
              "${{ needs.preflight.outputs.timestamp }}"
          else
            echo "⚠️  Helper script not found, generating basic files..."
            bash .github/workflows/generate-basic-module.sh \
              "${{ matrix.module.slug }}" \
              "${{ matrix.module.name }}"
          fi

      - name: Create BUILD_INFO file
        run: |
          cat > "modules/${{ matrix.module.slug }}/BUILD_INFO.txt" << EOF
          Module: ${{ matrix.module.name }}
          Slug: ${{ matrix.module.slug }}
          Version: ${{ needs.preflight.outputs.version }}
          Timestamp: ${{ needs.preflight.outputs.timestamp }}
          Branch: ${BRANCH_NAME}
          Generated by: GitHub Actions Professional Modules Orchestration
          EOF

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add modules/${{ matrix.module.slug }}/
          git commit -m "feat: Add ${{ matrix.module.name }} module

          - Database schema
          - API endpoints
          - Frontend components
          - Documentation
          - Tests

          Version: ${{ needs.preflight.outputs.version }}

          🤖 Generated with Claude Code

          Co-Authored-By: Claude <noreply@anthropic.com>"

      - name: Push branch
        run: |
          git push origin ${BRANCH_NAME}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ env.BASE_BRANCH }}
          title: "🎓 ${{ matrix.module.name }} Module - ${{ needs.preflight.outputs.version }}"
          body: |
            ## 🎓 ${{ matrix.module.name }} Module

            Auto-generated module for ${{ matrix.module.name }} tier.

            ### 🏗️ What's Included
            - **Database Schema**: Complete PostgreSQL schema
            - **API Endpoints**: RESTful API with FastAPI
            - **Frontend Components**: React dashboard with TypeScript
            - **Documentation**: Comprehensive README
            - **Tests**: Test scaffolding

            ### 🔖 Version Information
            - **Version**: ${{ needs.preflight.outputs.version }}
            - **Build Time**: ${{ needs.preflight.outputs.timestamp }}
            - **Branch**: `${{ env.BRANCH_NAME }}`

            ### ✅ Review Checklist
            - [ ] Database schema reviewed
            - [ ] API endpoints validated
            - [ ] Frontend components tested
            - [ ] Documentation complete
            - [ ] Tests passing

            🤖 Auto-generated by Professional Modules Orchestration
          labels: |
            ${{ matrix.module.label }}
            enhancement
            automated
            priority:high

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [preflight, build-professional-modules]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🎓 Professional Modules Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.preflight.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: ${{ needs.preflight.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Modules Built" >> $GITHUB_STEP_SUMMARY
          echo "- 🏥 Medical School" >> $GITHUB_STEP_SUMMARY
          echo "- ⚖️ Law School" >> $GITHUB_STEP_SUMMARY
          echo "- 💼 MBA Program" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Engineering" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **4 Pull Requests created!**" >> $GITHUB_STEP_SUMMARY
